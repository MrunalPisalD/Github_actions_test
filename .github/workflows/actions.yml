deploy name: Build, Push Docker Images to ECR, and Create Manifests

on:
  push:
    branches: [ "main" ]

jobs:
  build-push-and-deploy:
    name: Build, Push Docker Images to ECR, and Create Manifests
    runs-on: ubuntu-latest

    env:
      AWS_REGION: "us-east-1"
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      SERVICES: "service1 service2 service3"
      ECS_CLUSTER_NAME: "upload_ECS"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU and Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials and ECR login
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, Push Docker images, and Get Digests
        run: |
          for SERVICE in $SERVICES; do
            docker build -t $ECR_REGISTRY/$SERVICE:latest -f Dockerfile.$SERVICE .
            docker push $ECR_REGISTRY/$SERVICE:latest
            DIGEST=$(docker images --digests --format "{{.Digest}}" $ECR_REGISTRY/$SERVICE:latest)
            echo "::set-output name=${SERVICE}_digest::$DIGEST"
          done

      - name: Create and push Docker manifests
        run: |
          for SERVICE in $SERVICES; do
            DIGEST=${{ steps["Build, Push Docker images, and Get Digests"].outputs["${SERVICE}_digest"] }}
            docker manifest create $ECR_REGISTRY/$SERVICE:multi-arch \
                --amend $ECR_REGISTRY/$SERVICE:latest@${DIGEST}
            docker manifest push $ECR_REGISTRY/$SERVICE:multi-arch
          done

      - name: Update ECS services
        run: |
          for SERVICE in $SERVICES; do
            IMAGE_URI=$ECR_REGISTRY/$SERVICE:multi-arch
            echo "Updating service $SERVICE with image $IMAGE_URI"
            aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $SERVICE --force-new-deployment --region $AWS_REGION --desired-count 1
          done
