name: Build, Push Docker image to ECR, and Update ECS

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    name: Build, Push Docker image to ECR, and Update ECS
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image for Service 1
        id: build-and-push-service1
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: testvj
          IMAGE_TAG: 156
        run: |
          echo "Building Docker image for Service 1..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image for Service 1..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS service for Service 11
        if: success()
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: testvj
          IMAGE_TAG: 156
          ECS_CLUSTER_NAME: upload_ECS
          ECS_SERVICE_NAME: web-service1111
        run: |
          echo "Updating ECS service for Service 1 with image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --region $AWS_REGION

      - name: Build and push Docker image for Service 22
        id: build-and-push-service2
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: testvj
          IMAGE_TAG: 12023
        run: |
          echo "Building Docker image for Service 2..."
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          echo "Pushing Docker image for Service 2..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Update ECS service for Service 2
        if: success()
        env:
          AWS_REGION: us-east-1
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          ECR_REPOSITORY: testvj
          IMAGE_TAG: 12023
          ECS_CLUSTER_NAME: upload_ECS
          ECS_SERVICE_NAME: web-service2222
        run: |
          echo "Updating ECS service for Service 2 with image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --region $AWS_REGION

      # - name: Build and push Docker image for Service 3
      #   id: build-and-push-service3
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: lesson-086-service3
      #     IMAGE_TAG: ${{ steps.get-version.outputs.version }}
      #   run: |
      #     echo "Building Docker image for Service 3..."
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
      #     echo "Pushing Docker image for Service 3..."
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Update ECS service for Service 3
      #   if: success()
      #   env:
      #     AWS_REGION: us-east-1
      #     AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      #     ECR_REPOSITORY: lesson-086-service3
      #     IMAGE_TAG: ${{ steps.get-version.outputs.version }}
      #     ECS_CLUSTER_NAME: upload_ECS
      #     ECS_SERVICE_NAME: web-service3
      #   run: |
      #     echo "Updating ECS service for Service 3 with image $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
      #     aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment --region $AWS_REGION

      # - name: Get version tag for outputs
      #   id: get-version
      #   run: |
      #     NEW_TAG=$(./git_update.sh -v $VERSION)
      #     echo ::set-output name=version::$NEW_TAG
